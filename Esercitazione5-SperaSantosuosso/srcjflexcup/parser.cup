
import java.util.ArrayList;
import esercitazione5Cup.GrammarClasses.*;
import esercitazione5Cup.GrammarClasses.Leaf.*;
import esercitazione5Cup.GrammarClasses.Operations.BinariePlus.*;
import esercitazione5Cup.GrammarClasses.Operations.Unarie.*;
import esercitazione5Cup.GrammarClasses.Stats.*;
import java_cup.runtime.Symbol;

terminal MAIN, SEMI,VAR,BOOL,
        COMMA,ASSIGN,DEF,COLON,PIPE,OUT,VOID,
        RETURN,READ,WRITE,WRITELN;
terminal ID;
//PAR
terminal LPAR,RPAR,LBRACK,RBRACK;

//Operazioni Binarie
terminal PlusOp PLUS;
terminal MinusOp MINUS;
terminal TimesOp TIMES;
terminal DivOp DIV;
terminal PowOp POW;
terminal UMINUS;
terminal StrCatOp STR_CONCAT;

terminal OrOp OR;
terminal AndOp AND;
terminal GtOp GT;
terminal GeOp GE;
terminal LtOp LT;
terminal LeOp LE;
terminal EqOp EQ;
terminal NeOp NE;

//Operazioni Unarie
terminal NotOP NOT;

//Stmt
terminal IF,THEN,ELSE,WHILE,FOR,TO,LOOP;
terminal String INTEGER_CONST;
terminal Integer INTEGER;
terminal String REAL_CONST;
terminal Float FLOAT;
terminal String STRING_CONST;
terminal String STRING;
terminal String CHAR_CONST;
terminal String CHAR;
terminal boolean TRUE,FALSE;


nonterminal ProgramOp Program;
nonterminal BodyOp Else;
nonterminal ArrayList<Expr> ExprList;
nonterminal ArrayList<ParDeclOp> NonEmptyParamDeclList;
nonterminal ArrayList<ParDeclOp> ParamDeclList;
nonterminal Stat Stat;
nonterminal ForStatOp ForStat;
nonterminal ArrayList<Stat> StatList;
nonterminal ArrayList<VarDeclOp> VarDeclList;
nonterminal String TypeOrVoid;
nonterminal Const Const;
nonterminal Expr Expr;
nonterminal ArrayList<IdentifierOrInit> IdInitObblList;
nonterminal ArrayList<IdentifierOrInit> IdInitList;
nonterminal String Type;
nonterminal MainFunDeclOp MainFunDecl;
nonterminal ArrayList<DeclOp> DeclList;
nonterminal ArrayList<IdentifierOrInit> IdList;
nonterminal FunDeclOp FunDecl;
nonterminal BodyOp Body,Body2;
nonterminal ParDeclOp ParDecl;
nonterminal VarDeclOp VarDecl;
nonterminal ReadStatOp ReadStat;
nonterminal WriteStatOp WriteStat;
nonterminal AssignStatOp AssignStat;
nonterminal FunCallOp FunCall;
nonterminal WhileStatOp WhileStat;
nonterminal IfStatOp IfStat;
nonterminal Const con;

precedence left STR_CONCAT;

//Operazioni Aritmetiche
precedence left PLUS, MINUS,TIMES,DIV,AND,OR;
precedence right POW;
//sequenze di operazioni generano errori ed 4 = 5 = 6
precedence nonassoc GT,GE,LT,LE,EQ,NE;
precedence left ID;
precedence left RETURN;
precedence left LPAR,NOT,IF,WHILE,FOR,INTEGER_CONST,REAL_CONST,STRING_CONST,CHAR_CONST;
precedence left TRUE,FALSE;
precedence left COMMA,RBRACK,UMINUS;


Program ::= DeclList:decList1 MainFunDecl:mainFunDecl DeclList:decList2 {:
                                                                        RESULT = new ProgramOp(decList1,mainFunDecl,decList2);:};

DeclList ::= VarDecl:varDecl DeclList:declList {: RESULT = new ArrayList();
                                                RESULT.add(varDecl);
                                                RESULT.addAll(declList);
                                                :}
        | FunDecl:funDecl DeclList:declList {: RESULT = new ArrayList();
                                                RESULT.add(funDecl);
                                                RESULT.addAll(declList);
                                            :}
        | /* empty */ {: RESULT = new ArrayList(); :};

MainFunDecl ::= MAIN FunDecl:funDecl {: RESULT = new MainFunDeclOp("main",funDecl);
                                        Symbol sym = (java_cup.runtime.Symbol)CUP$Parser$stack.peek();
                                        RESULT.setLine(sym.left);
                                        :};

VarDecl ::= Type:type IdInitList:idInitList SEMI {:
 Symbol sym = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2));
 RESULT = new VarDeclOp(type,idInitList);
 RESULT.setLine(sym.left);
 :}
	| VAR IdInitObblList:idInitList SEMI {:
	 Symbol sym = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1));
	RESULT = new VarDeclOp("var",idInitList);
	RESULT.setLine(sym.left);
	:};

Type ::= INTEGER {:RESULT = "integer";:}
    | BOOL {:RESULT = "bool";:}
    | FLOAT {:RESULT = "float";:}
    | STRING {:RESULT = "string";:}
    | CHAR {:RESULT = "char";:};

IdInitList ::= ID:attrib {:
                            RESULT = new ArrayList<IdentifierOrInit>();
                            Symbol sym = (java_cup.runtime.Symbol)CUP$Parser$stack.peek();
                            Identifier id = new Identifier((Integer)attrib);
                            id.setLine(sym.left);
                            IdentifierOrInit idInit = new IdInitOp(id,null);
                           RESULT.add(idInit);
                          :}
	| IdInitList:idList COMMA ID:attrib {:
                                            RESULT = new ArrayList<IdentifierOrInit>();
                                            Symbol sym = (java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2);
                                            Identifier id = new Identifier((Integer)attrib);
                                            id.setLine(sym.left);
                                            IdentifierOrInit idInit = new IdInitOp(id,null);
                                            RESULT.addAll(idList);
                                            RESULT.add(idInit);

                                        :}
	| ID:attrib ASSIGN Expr:expr {:
	                            RESULT = new ArrayList<IdentifierOrInit>();
                                Symbol sym = (java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2);
                                Identifier id = new Identifier((Integer)attrib);
                                id.setLine(sym.left);
                                IdentifierOrInit idInit = new IdInitOp(id,expr);
                                RESULT.add(idInit);
                             :}
	| IdInitList:idInitList COMMA ID:attrib ASSIGN Expr:expr{:
                                      	RESULT = new ArrayList<IdentifierOrInit>();
                                        Symbol sym = (java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4);
                                        Identifier id = new Identifier((Integer)attrib);
                                        id.setLine(sym.left);
                                        IdentifierOrInit idInit = new IdInitOp(id,expr);
                                        RESULT.addAll(idInitList);
                                        RESULT.add(idInit);

                                      :};

IdInitObblList ::= ID:attrib ASSIGN Const:c {:
                                        RESULT = new ArrayList<IdentifierOrInit>();
                                        Symbol sym = (java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2);
                                        Identifier id = new Identifier((Integer)attrib);
                                        id.setLine(sym.left);
                                        IdentifierOrInit idInit = new IdInitOp(id,c);
                                        RESULT.add(idInit);
                                            :}
	| IdInitObblList:idInitObbList COMMA ID:attrib ASSIGN Const:c{:
                                           RESULT = new ArrayList<IdentifierOrInit>();
                                           Symbol sym = (java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2);
                                           Identifier id = new Identifier((Integer)attrib);
                                           id.setLine(sym.left);
                                           IdentifierOrInit idInit = new IdInitOp(id,c);
                                           RESULT.addAll(idInitObbList);
                                           RESULT.add(idInit);:};

Const ::= TRUE {:
    BooleanConst c = new BooleanConst(true);
    Symbol sym = (java_cup.runtime.Symbol)CUP$Parser$stack.peek();
    c.setLine(sym.left);
     RESULT = c;
    :}
   | FALSE {:
    BooleanConst c = new BooleanConst(false);
    Symbol sym = (java_cup.runtime.Symbol)CUP$Parser$stack.peek();
    c.setLine(sym.left);
    RESULT = c;
    :}
    | INTEGER_CONST:attrib {:
       IntegerConst c = new IntegerConst(Integer.parseInt(attrib));
       Symbol sym = (java_cup.runtime.Symbol)CUP$Parser$stack.peek();
       c.setLine(sym.left);
       RESULT = c;
    :}

    | REAL_CONST:attrib {:
    RealConst c = new RealConst(Float.parseFloat(attrib));
    Symbol sym = (java_cup.runtime.Symbol)CUP$Parser$stack.peek();
    c.setLine(sym.left);
    RESULT = c;
    :}
    | STRING_CONST:attrib {:
        StringConst c = new StringConst(attrib);
        Symbol sym = (java_cup.runtime.Symbol)CUP$Parser$stack.peek();
        c.setLine(sym.left);
        RESULT = c;
    :}
    | CHAR_CONST:attrib {:
    CharConst c = new CharConst(attrib);
    Symbol sym = (java_cup.runtime.Symbol)CUP$Parser$stack.peek();
    c.setLine(sym.left);
    RESULT = c;
    :};

FunDecl ::= DEF ID:attrib LPAR ParamDeclList:parDeclList RPAR COLON TypeOrVoid:typeOrVoid Body:body {:
        Symbol sym = (java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6);
       Identifier id = new Identifier((Integer)attrib);
            RESULT = new FunDeclOp(id,parDeclList,typeOrVoid,body);
            RESULT.setLine(sym.left);
        :};

Body ::= LBRACK VarDeclList:varDeclList StatList:statList RBRACK {: RESULT = new BodyOp(varDeclList,statList); :};

ParamDeclList ::= /*empty */ {: RESULT = new ArrayList<ParDeclOp>();:}
	| NonEmptyParamDeclList:parDeclList {: RESULT = new ArrayList<ParDeclOp>();
                                RESULT.addAll(parDeclList);:};

NonEmptyParamDeclList ::= ParDecl:parDecl  {: RESULT = new ArrayList<ParDeclOp>(); RESULT.add(parDecl);:}
	| NonEmptyParamDeclList:parDeclList PIPE ParDecl:parDecl {: RESULT = new ArrayList<ParDeclOp>();
	                                                            RESULT.addAll(parDeclList);
	                                                             RESULT.add(parDecl);:};

ParDecl ::= Type:type IdList:idList {: RESULT = new ParDeclOp(null,type,idList); :}
	| OUT Type:type IdList:idList {: RESULT = new ParDeclOp("out",type,idList); :};

TypeOrVoid ::= Type:type {: RESULT = type; :}
               | VOID {: RESULT = "void"; :};

VarDeclList ::= {: RESULT = new ArrayList<VarDeclOp>(); :}
	| VarDecl:varDecl VarDeclList:varDeclList {:RESULT = new ArrayList<VarDeclOp>();

	                                            RESULT.add(varDecl);
                                                RESULT.addAll(varDeclList);
                                                :};

//Inserire tipo dell'array list (Stat)
StatList ::= Stat:stat {:RESULT = new ArrayList<>();
                                                RESULT.add(stat); :}
	 | StatList:statList Stat:stat {:RESULT = new ArrayList<>();
	                                    RESULT.addAll(statList);
	                                    RESULT.add(stat); :};


Stat ::= IfStat:ifStat {: RESULT = ifStat;:}
	| ForStat:forStat {:RESULT = forStat;:}
	| ReadStat:readStat SEMI {: RESULT = readStat;:}
	| WriteStat:writeStat SEMI {: RESULT = writeStat;:}
	| AssignStat:assignStat SEMI {: RESULT = assignStat;:}
    | WhileStat:whileStat {: RESULT = whileStat;:}
	| FunCall:funCall SEMI {: RESULT = funCall; :}
	| RETURN Expr:expr SEMI {: RESULT = new ReturnOp(expr);
	                            Symbol sym = (java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1);
	                            RESULT.setLine(sym.left);:}
	| RETURN SEMI {: RESULT = new ReturnOp();
                     Symbol sym = (java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1);
                     RESULT.setLine(sym.left);:}
	| /* empty */ {: RESULT = null; :};

IfStat ::= IF Expr:expr THEN Body:body1 Else:body2 {:
                                                        RESULT = new IfStatOp(expr,body1,(BodyOp) body2);
                                                        Symbol sym = (java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3);
                                                        RESULT.setLine(sym.left);
                                                    :};

Else ::= /* empty */ {:RESULT = new BodyOp(null,null);:}
	| ELSE Body:body {:RESULT = body;:};

WhileStat ::= WHILE Expr:expr LOOP Body:body {:
                                                RESULT = new WhileStatOp(expr,body);
                                                Symbol sym = (java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2);
                                                RESULT.setLine(sym.left);
                                             :};

ForStat ::= FOR ID:attrib ASSIGN INTEGER_CONST:intConst1 TO INTEGER_CONST:intConst2 LOOP Body:body
    {:
        Symbol sym = (java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4);
       Identifier id = new Identifier((Integer)attrib);
       IdInitOp idInit = new IdInitOp(id,new IntegerConst(Integer.parseInt(intConst1)));
       IntegerConst arg2 = new IntegerConst(Integer.parseInt(intConst2));
       arg2.setType(new TypeSetter("integer"));
       RESULT = new ForStatOp(idInit,arg2,body);
       RESULT.setLine(sym.left);
    :};

ReadStat ::= IdList:idList READ STRING_CONST:attrib {: RESULT = new ReadStatOp(idList,new StringConst(attrib));:}
	|  IdList:idList READ {: RESULT = new ReadStatOp(idList,null); :};

IdList ::= ID:attrib {:RESULT = new ArrayList<IdentifierOrInit>();
                        Symbol sym = (java_cup.runtime.Symbol) CUP$Parser$stack.peek();
                        Identifier i = new Identifier((Integer) attrib);
                        i.setLine(sym.left);
                        RESULT.add(i); :}
	| IdList:idList COMMA ID:attrib {:RESULT = new ArrayList<IdentifierOrInit>();
	                        RESULT.addAll(idList);
	                        Symbol sym = (java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2);
	                        Identifier i = new Identifier((Integer) attrib);
                            i.setLine(sym.left);
                            RESULT.add(i); :};

WriteStat ::= LPAR ExprList:exprList RPAR WRITE {:
            Symbol sym = (java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1);
            RESULT = new WriteStatOp(exprList, new StringConst("write"));
            RESULT.setLine(sym.left);:}
	   | LPAR ExprList:exprList RPAR WRITELN {:
	   Symbol sym = (java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1);
	   RESULT = new WriteStatOp(exprList,new StringConst("writeln"));
	   RESULT.setLine(sym.left);
	   :};


AssignStat ::=  IdList:idList ASSIGN ExprList:exprList {:
            Symbol sym = (java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2);
            RESULT = new AssignStatOp(idList,exprList);
            RESULT.setLine(sym.left);:};

FunCall ::= ID:attrib LPAR ExprList:exprList RPAR {:
            Symbol sym = (java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3);
            Identifier i = new Identifier((Integer) attrib);
            i.setLine(sym.left);

            RESULT = new FunCallOp(i,exprList,null);
            RESULT.setLine(sym.left);

            :}
	| ID:attrib LPAR RPAR {:
	            Symbol sym = (java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2);
                Identifier i = new Identifier((Integer) attrib);
                i.setLine(sym.left);
	            RESULT = new FunCallOp(i,null,null);
	            RESULT.setLine(sym.left);
	            :};

ExprList ::= Expr:expr {:RESULT = new ArrayList<Expr>();
                         RESULT.add(expr); :}
	| Expr:expr COMMA ExprList:exprList {:RESULT = new ArrayList<Expr>();
	                            RESULT.add(expr);
                                RESULT.addAll(exprList);
                               :};

Expr ::= Const:con {: RESULT = con; :}
	| ID:attrib {:RESULT = new Identifier((Integer)attrib);
	                Symbol sym = (java_cup.runtime.Symbol) CUP$Parser$stack.peek();
	                RESULT.setLine(sym.left);
	             :}
	| FunCall:funCall {: RESULT = funCall;
	                    Symbol sym = (java_cup.runtime.Symbol) CUP$Parser$stack.peek();
    	                RESULT.setLine(sym.left);
	                    :}
	| Expr:expr1  PLUS Expr:expr2 {:RESULT = new PlusOp(expr1,expr2);
	                                Symbol sym = (java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2);
                                    RESULT.setLine(sym.left);
	                                :}
	| Expr:expr1  MINUS Expr:expr2 {:RESULT = new MinusOp(expr1,expr2);
	                                    Symbol sym = (java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2);
                                        RESULT.setLine(sym.left);
	                                :}
	| Expr:expr1  TIMES Expr:expr2 {:RESULT = new TimesOp(expr1,expr2);
	                                      Symbol sym = (java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2);
                                          RESULT.setLine(sym.left);
	                                :}
	| Expr:expr1  DIV Expr:expr2 {:RESULT = new DivOp(expr1,expr2);
	                                            Symbol sym = (java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2);
                                                RESULT.setLine(sym.left);
	                                :}
	| Expr:expr1 AND Expr:expr2 {:RESULT = new AndOp(expr1,expr2);
                                                Symbol sym = (java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2);
                                                RESULT.setLine(sym.left);
	                                :}
	| Expr:expr1 POW Expr:expr2 {:RESULT = new PowOp(expr1,expr2);
	                                                Symbol sym = (java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2);
                                                    RESULT.setLine(sym.left);
    	                                :}
	| Expr:expr1 STR_CONCAT Expr:expr2 {:RESULT = new StrCatOp(expr1,expr2);
	                                                Symbol sym = (java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2);
                                                    RESULT.setLine(sym.left);
    	                                :}
	| Expr:expr1  OR Expr:expr2 {:RESULT = new OrOp(expr1,expr2);
	                                                Symbol sym = (java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2);
                                                    RESULT.setLine(sym.left);
    	                                :}
	| Expr:expr1  GT Expr:expr2 {:RESULT = new GtOp(expr1,expr2);
	                                                Symbol sym = (java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2);
                                                    RESULT.setLine(sym.left);
    	                                :}
	| Expr:expr1  GE Expr:expr2 {:RESULT = new GeOp(expr1,expr2);
	                                                Symbol sym = (java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2);
                                                    RESULT.setLine(sym.left);
    	                                :}
	| Expr:expr1  LT Expr:expr2 {:RESULT = new LtOp(expr1,expr2);
	                                                Symbol sym = (java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2);
                                                    RESULT.setLine(sym.left);
    	                                :}
	| Expr:expr1  LE Expr:expr2 {:RESULT = new LeOp(expr1,expr2);
	                                                Symbol sym = (java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2);
                                                    RESULT.setLine(sym.left);
    	                                :}
	| Expr:expr1  EQ Expr:expr2 {:RESULT = new EqOp(expr1,expr2);
	                                                Symbol sym = (java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2);
                                                    RESULT.setLine(sym.left);
    	                                :}
	| Expr:expr1  NE Expr:expr2 {:RESULT = new NeOp(expr1,expr2);
	                                                Symbol sym = (java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2);
                                                    RESULT.setLine(sym.left);
    	                                :}
	| MINUS Expr:expr {:RESULT = new UMinusOp(expr);
	                    Symbol sym = (java_cup.runtime.Symbol) CUP$Parser$stack.peek();
                        RESULT.setLine(sym.left);
    	               :}
    %prec UMINUS
	| NOT Expr:expr {:RESULT = new NotOp(expr);
	                  Symbol sym = (java_cup.runtime.Symbol) CUP$Parser$stack.peek();
                      RESULT.setLine(sym.left);
    	             :}
	| LPAR Expr:expr RPAR {:RESULT = expr;
	                         Symbol sym = (java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1);
                             RESULT.setLine(sym.left);
    	                   :};