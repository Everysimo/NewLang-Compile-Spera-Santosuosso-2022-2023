
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package esercitazione4Cup;

import java_cup.runtime.*;
import java.util.ArrayList;
import esercitazione4Cup.GrammarClasses.*;
import esercitazione4Cup.GrammarClasses.Leaf.*;
import esercitazione4Cup.GrammarClasses.Operations.BinariePlus.*;
import esercitazione4Cup.GrammarClasses.Operations.Unarie.*;
import esercitazione4Cup.GrammarClasses.Stats.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Token.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\125\000\002\002\005\000\002\002\004\000\002\022" +
    "\004\000\002\022\004\000\002\022\002\000\002\021\004" +
    "\000\002\030\005\000\002\030\005\000\002\020\003\000" +
    "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
    "\020\003\000\002\017\003\000\002\017\005\000\002\017" +
    "\005\000\002\017\007\000\002\016\005\000\002\016\007" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\024\012\000\002\025\006\000\002\006\002\000\002\006" +
    "\003\000\002\005\003\000\002\005\005\000\002\027\004" +
    "\000\002\027\005\000\002\013\003\000\002\013\003\000" +
    "\002\012\002\000\002\012\004\000\002\011\003\000\002" +
    "\011\004\000\002\007\003\000\002\007\003\000\002\007" +
    "\004\000\002\007\004\000\002\007\004\000\002\007\003" +
    "\000\002\007\004\000\002\007\005\000\002\007\004\000" +
    "\002\007\002\000\002\036\007\000\002\003\002\000\002" +
    "\003\004\000\002\035\006\000\002\010\012\000\002\031" +
    "\005\000\002\031\004\000\002\023\003\000\002\023\005" +
    "\000\002\032\006\000\002\032\006\000\002\033\005\000" +
    "\002\034\006\000\002\034\005\000\002\004\003\000\002" +
    "\004\005\000\002\015\003\000\002\015\003\000\002\015" +
    "\003\000\002\015\005\000\002\015\005\000\002\015\005" +
    "\000\002\015\005\000\002\015\005\000\002\015\005\000" +
    "\002\015\005\000\002\015\005\000\002\015\005\000\002" +
    "\015\005\000\002\015\005\000\002\015\005\000\002\015" +
    "\005\000\002\015\005\000\002\015\004\000\002\015\004" +
    "\000\002\015\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\243\000\022\004\ufffd\006\013\007\007\012\015\057" +
    "\005\061\016\063\012\065\017\001\002\000\004\023\235" +
    "\001\002\000\006\023\ufff9\026\ufff9\001\002\000\004\002" +
    "\234\001\002\000\006\023\ufff8\026\ufff8\001\002\000\024" +
    "\002\ufffd\004\ufffd\006\013\007\007\012\015\057\005\061" +
    "\016\063\012\065\017\001\002\000\024\002\ufffd\004\ufffd" +
    "\006\013\007\007\012\015\057\005\061\016\063\012\065" +
    "\017\001\002\000\006\023\ufff6\026\ufff6\001\002\000\004" +
    "\023\221\001\002\000\004\004\215\001\002\000\004\023" +
    "\020\001\002\000\006\023\ufff7\026\ufff7\001\002\000\006" +
    "\023\ufff5\026\ufff5\001\002\000\004\024\021\001\002\000" +
    "\020\007\007\015\026\025\uffe6\057\005\061\016\063\012" +
    "\065\017\001\002\000\004\025\037\001\002\000\004\023" +
    "\030\001\002\000\006\014\uffe4\025\uffe4\001\002\000\006" +
    "\014\034\025\uffe5\001\002\000\014\007\007\057\005\061" +
    "\016\063\012\065\017\001\002\000\004\023\030\001\002" +
    "\000\010\010\uffc9\014\uffc9\025\uffc9\001\002\000\010\010" +
    "\032\014\uffe1\025\uffe1\001\002\000\004\023\033\001\002" +
    "\000\014\010\uffc8\011\uffc8\014\uffc8\020\uffc8\025\uffc8\001" +
    "\002\000\016\007\007\015\026\057\005\061\016\063\012" +
    "\065\017\001\002\000\006\014\uffe3\025\uffe3\001\002\000" +
    "\010\010\032\014\uffe2\025\uffe2\001\002\000\004\013\040" +
    "\001\002\000\016\007\007\016\043\057\005\061\016\063" +
    "\012\065\017\001\002\000\004\026\044\001\002\000\004" +
    "\026\uffe0\001\002\000\004\026\uffdf\001\002\000\034\006" +
    "\013\007\007\017\uffde\023\uffde\024\uffde\027\uffde\047\uffde" +
    "\052\uffde\053\uffde\057\005\061\016\063\012\065\017\001" +
    "\002\000\024\002\uffe8\004\uffe8\006\uffe8\007\uffe8\012\uffe8" +
    "\057\uffe8\061\uffe8\063\uffe8\065\uffe8\001\002\000\020\017" +
    "\066\023\062\024\055\027\uffd1\047\056\052\051\053\053" +
    "\001\002\000\034\006\013\007\007\017\uffde\023\uffde\024" +
    "\uffde\027\uffde\047\uffde\052\uffde\053\uffde\057\005\061\016" +
    "\063\012\065\017\001\002\000\020\017\uffdd\023\uffdd\024" +
    "\uffdd\027\uffdd\047\uffdd\052\uffdd\053\uffdd\001\002\000\026" +
    "\023\105\024\101\031\072\046\107\056\104\060\074\062" +
    "\077\064\106\066\076\067\102\001\002\000\020\017\uffd5" +
    "\023\uffd5\024\uffd5\027\uffd5\047\uffd5\052\uffd5\053\uffd5\001" +
    "\002\000\004\023\203\001\002\000\020\017\uffda\023\uffda" +
    "\024\uffda\027\uffda\047\uffda\052\uffda\053\uffda\001\002\000" +
    "\026\023\105\024\101\031\072\046\107\056\104\060\074" +
    "\062\077\064\106\066\076\067\102\001\002\000\026\023" +
    "\105\024\101\031\072\046\107\056\104\060\074\062\077" +
    "\064\106\066\076\067\102\001\002\000\020\017\066\023" +
    "\062\024\055\027\167\047\056\052\051\053\053\001\002" +
    "\000\004\005\166\001\002\000\004\005\165\001\002\000" +
    "\012\010\uffc9\011\uffc9\020\uffc9\024\145\001\002\000\010" +
    "\010\032\011\162\020\161\001\002\000\004\005\160\001" +
    "\002\000\020\017\uffdc\023\uffdc\024\uffdc\027\uffdc\047\uffdc" +
    "\052\uffdc\053\uffdc\001\002\000\030\005\100\023\105\024" +
    "\101\031\072\046\107\056\104\060\074\062\077\064\106" +
    "\066\076\067\102\001\002\000\004\005\071\001\002\000" +
    "\020\017\uffd9\023\uffd9\024\uffd9\027\uffd9\047\uffd9\052\uffd9" +
    "\053\uffd9\001\002\000\020\017\uffd8\023\uffd8\024\uffd8\027" +
    "\uffd8\047\uffd8\052\uffd8\053\uffd8\001\002\000\026\023\105" +
    "\024\101\031\072\046\107\056\104\060\074\062\077\064" +
    "\106\066\076\067\102\001\002\000\050\005\uffc0\010\uffc0" +
    "\025\uffc0\030\uffc0\031\uffc0\032\uffc0\033\uffc0\034\uffc0\035" +
    "\uffc0\036\uffc0\037\uffc0\040\uffc0\041\uffc0\042\uffc0\043\uffc0" +
    "\044\uffc0\045\uffc0\050\uffc0\055\uffc0\001\002\000\050\005" +
    "\uffeb\010\uffeb\025\uffeb\030\uffeb\031\uffeb\032\uffeb\033\uffeb" +
    "\034\uffeb\035\uffeb\036\uffeb\037\uffeb\040\uffeb\041\uffeb\042" +
    "\uffeb\043\uffeb\044\uffeb\045\uffeb\050\uffeb\055\uffeb\001\002" +
    "\000\040\005\156\030\115\031\111\032\122\033\120\034" +
    "\113\035\124\036\126\037\112\040\121\041\114\042\125" +
    "\043\117\044\116\045\123\001\002\000\050\005\uffee\010" +
    "\uffee\025\uffee\030\uffee\031\uffee\032\uffee\033\uffee\034\uffee" +
    "\035\uffee\036\uffee\037\uffee\040\uffee\041\uffee\042\uffee\043" +
    "\uffee\044\uffee\045\uffee\050\uffee\055\uffee\001\002\000\050" +
    "\005\uffea\010\uffea\025\uffea\030\uffea\031\uffea\032\uffea\033" +
    "\uffea\034\uffea\035\uffea\036\uffea\037\uffea\040\uffea\041\uffea" +
    "\042\uffea\043\uffea\044\uffea\045\uffea\050\uffea\055\uffea\001" +
    "\002\000\020\017\uffd2\023\uffd2\024\uffd2\027\uffd2\047\uffd2" +
    "\052\uffd2\053\uffd2\001\002\000\026\023\105\024\101\031" +
    "\072\046\107\056\104\060\074\062\077\064\106\066\076" +
    "\067\102\001\002\000\050\005\uffed\010\uffed\025\uffed\030" +
    "\uffed\031\uffed\032\uffed\033\uffed\034\uffed\035\uffed\036\uffed" +
    "\037\uffed\040\uffed\041\uffed\042\uffed\043\uffed\044\uffed\045" +
    "\uffed\050\uffed\055\uffed\001\002\000\050\005\uffbe\010\uffbe" +
    "\025\uffbe\030\uffbe\031\uffbe\032\uffbe\033\uffbe\034\uffbe\035" +
    "\uffbe\036\uffbe\037\uffbe\040\uffbe\041\uffbe\042\uffbe\043\uffbe" +
    "\044\uffbe\045\uffbe\050\uffbe\055\uffbe\001\002\000\050\005" +
    "\uffec\010\uffec\025\uffec\030\uffec\031\uffec\032\uffec\033\uffec" +
    "\034\uffec\035\uffec\036\uffec\037\uffec\040\uffec\041\uffec\042" +
    "\uffec\043\uffec\044\uffec\045\uffec\050\uffec\055\uffec\001\002" +
    "\000\052\005\uffbf\010\uffbf\024\145\025\uffbf\030\uffbf\031" +
    "\uffbf\032\uffbf\033\uffbf\034\uffbf\035\uffbf\036\uffbf\037\uffbf" +
    "\040\uffbf\041\uffbf\042\uffbf\043\uffbf\044\uffbf\045\uffbf\050" +
    "\uffbf\055\uffbf\001\002\000\050\005\uffe9\010\uffe9\025\uffe9" +
    "\030\uffe9\031\uffe9\032\uffe9\033\uffe9\034\uffe9\035\uffe9\036" +
    "\uffe9\037\uffe9\040\uffe9\041\uffe9\042\uffe9\043\uffe9\044\uffe9" +
    "\045\uffe9\050\uffe9\055\uffe9\001\002\000\026\023\105\024" +
    "\101\031\072\046\107\056\104\060\074\062\077\064\106" +
    "\066\076\067\102\001\002\000\050\005\uffae\010\uffae\025" +
    "\uffae\030\uffae\031\uffae\032\uffae\033\uffae\034\uffae\035\uffae" +
    "\036\uffae\037\uffae\040\uffae\041\uffae\042\uffae\043\uffae\044" +
    "\uffae\045\uffae\050\uffae\055\uffae\001\002\000\026\023\105" +
    "\024\101\031\072\046\107\056\104\060\074\062\077\064" +
    "\106\066\076\067\102\001\002\000\026\023\105\024\101" +
    "\031\072\046\107\056\104\060\074\062\077\064\106\066" +
    "\076\067\102\001\002\000\026\023\105\024\101\031\072" +
    "\046\107\056\104\060\074\062\077\064\106\066\076\067" +
    "\102\001\002\000\026\023\105\024\101\031\072\046\107" +
    "\056\104\060\074\062\077\064\106\066\076\067\102\001" +
    "\002\000\026\023\105\024\101\031\072\046\107\056\104" +
    "\060\074\062\077\064\106\066\076\067\102\001\002\000" +
    "\026\023\105\024\101\031\072\046\107\056\104\060\074" +
    "\062\077\064\106\066\076\067\102\001\002\000\026\023" +
    "\105\024\101\031\072\046\107\056\104\060\074\062\077" +
    "\064\106\066\076\067\102\001\002\000\026\023\105\024" +
    "\101\031\072\046\107\056\104\060\074\062\077\064\106" +
    "\066\076\067\102\001\002\000\026\023\105\024\101\031" +
    "\072\046\107\056\104\060\074\062\077\064\106\066\076" +
    "\067\102\001\002\000\026\023\105\024\101\031\072\046" +
    "\107\056\104\060\074\062\077\064\106\066\076\067\102" +
    "\001\002\000\026\023\105\024\101\031\072\046\107\056" +
    "\104\060\074\062\077\064\106\066\076\067\102\001\002" +
    "\000\026\023\105\024\101\031\072\046\107\056\104\060" +
    "\074\062\077\064\106\066\076\067\102\001\002\000\026" +
    "\023\105\024\101\031\072\046\107\056\104\060\074\062" +
    "\077\064\106\066\076\067\102\001\002\000\026\023\105" +
    "\024\101\031\072\046\107\056\104\060\074\062\077\064" +
    "\106\066\076\067\102\001\002\000\050\005\uffb6\010\uffb6" +
    "\025\uffb6\030\uffb6\031\uffb6\032\uffb6\033\uffb6\034\113\035" +
    "\uffb6\036\uffb6\037\uffb6\040\121\041\114\042\125\043\117" +
    "\044\116\045\123\050\uffb6\055\uffb6\001\002\000\034\005" +
    "\uffb3\010\uffb3\025\uffb3\030\uffb3\031\uffb3\032\uffb3\033\uffb3" +
    "\034\uffb3\035\uffb3\036\uffb3\037\uffb3\050\uffb3\055\uffb3\001" +
    "\002\000\050\005\uffb7\010\uffb7\025\uffb7\030\115\031\111" +
    "\032\122\033\120\034\113\035\uffb7\036\126\037\112\040" +
    "\121\041\114\042\125\043\117\044\116\045\123\050\uffb7" +
    "\055\uffb7\001\002\000\034\005\uffb0\010\uffb0\025\uffb0\030" +
    "\uffb0\031\uffb0\032\uffb0\033\uffb0\034\uffb0\035\uffb0\036\uffb0" +
    "\037\uffb0\050\uffb0\055\uffb0\001\002\000\050\005\uffbb\010" +
    "\uffbb\025\uffbb\030\uffbb\031\uffbb\032\uffbb\033\uffbb\034\113" +
    "\035\uffbb\036\uffbb\037\uffbb\040\121\041\114\042\125\043" +
    "\117\044\116\045\123\050\uffbb\055\uffbb\001\002\000\034" +
    "\005\uffb5\010\uffb5\025\uffb5\030\uffb5\031\uffb5\032\uffb5\033" +
    "\uffb5\034\uffb5\035\uffb5\036\uffb5\037\uffb5\050\uffb5\055\uffb5" +
    "\001\002\000\050\005\uffba\010\uffba\025\uffba\030\uffba\031" +
    "\uffba\032\uffba\033\uffba\034\113\035\uffba\036\uffba\037\uffba" +
    "\040\121\041\114\042\125\043\117\044\116\045\123\050" +
    "\uffba\055\uffba\001\002\000\034\005\uffb2\010\uffb2\025\uffb2" +
    "\030\uffb2\031\uffb2\032\uffb2\033\uffb2\034\uffb2\035\uffb2\036" +
    "\uffb2\037\uffb2\050\uffb2\055\uffb2\001\002\000\034\005\uffb1" +
    "\010\uffb1\025\uffb1\030\uffb1\031\uffb1\032\uffb1\033\uffb1\034" +
    "\uffb1\035\uffb1\036\uffb1\037\uffb1\050\uffb1\055\uffb1\001\002" +
    "\000\050\005\uffbd\010\uffbd\025\uffbd\030\uffbd\031\uffbd\032" +
    "\uffbd\033\uffbd\034\113\035\uffbd\036\uffbd\037\uffbd\040\121" +
    "\041\114\042\125\043\117\044\116\045\123\050\uffbd\055" +
    "\uffbd\001\002\000\034\005\uffb4\010\uffb4\025\uffb4\030\uffb4" +
    "\031\uffb4\032\uffb4\033\uffb4\034\uffb4\035\uffb4\036\uffb4\037" +
    "\uffb4\050\uffb4\055\uffb4\001\002\000\050\005\uffb8\010\uffb8" +
    "\025\uffb8\030\uffb8\031\uffb8\032\uffb8\033\uffb8\034\113\035" +
    "\uffb8\036\uffb8\037\uffb8\040\121\041\114\042\125\043\117" +
    "\044\116\045\123\050\uffb8\055\uffb8\001\002\000\050\005" +
    "\uffb9\010\uffb9\025\uffb9\030\uffb9\031\uffb9\032\uffb9\033\uffb9" +
    "\034\113\035\uffb9\036\uffb9\037\uffb9\040\121\041\114\042" +
    "\125\043\117\044\116\045\123\050\uffb9\055\uffb9\001\002" +
    "\000\050\005\uffbc\010\uffbc\025\uffbc\030\uffbc\031\uffbc\032" +
    "\uffbc\033\uffbc\034\113\035\uffbc\036\uffbc\037\uffbc\040\121" +
    "\041\114\042\125\043\117\044\116\045\123\050\uffbc\055" +
    "\uffbc\001\002\000\030\023\105\024\101\025\150\031\072" +
    "\046\107\056\104\060\074\062\077\064\106\066\076\067" +
    "\102\001\002\000\044\005\uffc2\010\152\025\uffc2\030\115" +
    "\031\111\032\122\033\120\034\113\035\124\036\126\037" +
    "\112\040\121\041\114\042\125\043\117\044\116\045\123" +
    "\001\002\000\004\025\151\001\002\000\050\005\uffc3\010" +
    "\uffc3\025\uffc3\030\uffc3\031\uffc3\032\uffc3\033\uffc3\034\uffc3" +
    "\035\uffc3\036\uffc3\037\uffc3\040\uffc3\041\uffc3\042\uffc3\043" +
    "\uffc3\044\uffc3\045\uffc3\050\uffc3\055\uffc3\001\002\000\050" +
    "\005\uffc4\010\uffc4\025\uffc4\030\uffc4\031\uffc4\032\uffc4\033" +
    "\uffc4\034\uffc4\035\uffc4\036\uffc4\037\uffc4\040\uffc4\041\uffc4" +
    "\042\uffc4\043\uffc4\044\uffc4\045\uffc4\050\uffc4\055\uffc4\001" +
    "\002\000\026\023\105\024\101\031\072\046\107\056\104" +
    "\060\074\062\077\064\106\066\076\067\102\001\002\000" +
    "\006\005\uffc1\025\uffc1\001\002\000\040\025\155\030\115" +
    "\031\111\032\122\033\120\034\113\035\124\036\126\037" +
    "\112\040\121\041\114\042\125\043\117\044\116\045\123" +
    "\001\002\000\050\005\uffad\010\uffad\025\uffad\030\uffad\031" +
    "\uffad\032\uffad\033\uffad\034\uffad\035\uffad\036\uffad\037\uffad" +
    "\040\uffad\041\uffad\042\uffad\043\uffad\044\uffad\045\uffad\050" +
    "\uffad\055\uffad\001\002\000\020\017\uffd3\023\uffd3\024\uffd3" +
    "\027\uffd3\047\uffd3\052\uffd3\053\uffd3\001\002\000\050\005" +
    "\uffaf\010\uffaf\025\uffaf\030\uffaf\031\uffaf\032\uffaf\033\uffaf" +
    "\034\113\035\uffaf\036\uffaf\037\uffaf\040\121\041\114\042" +
    "\125\043\117\044\116\045\123\050\uffaf\055\uffaf\001\002" +
    "\000\020\017\uffd7\023\uffd7\024\uffd7\027\uffd7\047\uffd7\052" +
    "\uffd7\053\uffd7\001\002\000\006\005\uffca\062\164\001\002" +
    "\000\026\023\105\024\101\031\072\046\107\056\104\060" +
    "\074\062\077\064\106\066\076\067\102\001\002\000\004" +
    "\005\uffc5\001\002\000\004\005\uffcb\001\002\000\020\017" +
    "\uffd4\023\uffd4\024\uffd4\027\uffd4\047\uffd4\052\uffd4\053\uffd4" +
    "\001\002\000\020\017\uffd6\023\uffd6\024\uffd6\027\uffd6\047" +
    "\uffd6\052\uffd6\053\uffd6\001\002\000\044\002\uffe7\004\uffe7" +
    "\006\uffe7\007\uffe7\012\uffe7\017\uffe7\023\uffe7\024\uffe7\027" +
    "\uffe7\047\uffe7\051\uffe7\052\uffe7\053\uffe7\057\uffe7\061\uffe7" +
    "\063\uffe7\065\uffe7\001\002\000\020\017\uffdb\023\uffdb\024" +
    "\uffdb\027\uffdb\047\uffdb\052\uffdb\053\uffdb\001\002\000\040" +
    "\030\115\031\111\032\122\033\120\034\113\035\124\036" +
    "\126\037\112\040\121\041\114\042\125\043\117\044\116" +
    "\045\123\050\172\001\002\000\004\026\044\001\002\000" +
    "\022\017\uffcf\023\uffcf\024\uffcf\027\uffcf\047\uffcf\051\174" +
    "\052\uffcf\053\uffcf\001\002\000\004\026\044\001\002\000" +
    "\020\017\uffd0\023\uffd0\024\uffd0\027\uffd0\047\uffd0\052\uffd0" +
    "\053\uffd0\001\002\000\020\017\uffce\023\uffce\024\uffce\027" +
    "\uffce\047\uffce\052\uffce\053\uffce\001\002\000\004\025\200" +
    "\001\002\000\006\021\201\022\202\001\002\000\004\005" +
    "\uffc7\001\002\000\004\005\uffc6\001\002\000\004\011\204" +
    "\001\002\000\004\056\205\001\002\000\004\054\206\001" +
    "\002\000\004\056\207\001\002\000\004\055\210\001\002" +
    "\000\004\026\044\001\002\000\020\017\uffcc\023\uffcc\024" +
    "\uffcc\027\uffcc\047\uffcc\052\uffcc\053\uffcc\001\002\000\040" +
    "\030\115\031\111\032\122\033\120\034\113\035\124\036" +
    "\126\037\112\040\121\041\114\042\125\043\117\044\116" +
    "\045\123\055\213\001\002\000\004\026\044\001\002\000" +
    "\020\017\uffcd\023\uffcd\024\uffcd\027\uffcd\047\uffcd\052\uffcd" +
    "\053\uffcd\001\002\000\004\012\015\001\002\000\022\002" +
    "\ufffd\006\013\007\007\012\015\057\005\061\016\063\012" +
    "\065\017\001\002\000\004\002\001\001\002\000\022\002" +
    "\ufffc\006\ufffc\007\ufffc\012\ufffc\057\ufffc\061\ufffc\063\ufffc" +
    "\065\ufffc\001\002\000\004\011\230\001\002\000\006\005" +
    "\224\010\223\001\002\000\004\023\225\001\002\000\042" +
    "\002\ufffa\004\ufffa\006\ufffa\007\ufffa\012\ufffa\017\ufffa\023" +
    "\ufffa\024\ufffa\027\ufffa\047\ufffa\052\ufffa\053\ufffa\057\ufffa" +
    "\061\ufffa\063\ufffa\065\ufffa\001\002\000\004\011\226\001" +
    "\002\000\016\056\104\060\074\062\077\064\106\066\076" +
    "\067\102\001\002\000\006\005\uffef\010\uffef\001\002\000" +
    "\016\056\104\060\074\062\077\064\106\066\076\067\102" +
    "\001\002\000\006\005\ufff0\010\ufff0\001\002\000\006\002" +
    "\uffff\004\uffff\001\002\000\006\002\ufffe\004\ufffe\001\002" +
    "\000\004\002\000\001\002\000\010\005\ufff4\010\ufff4\011" +
    "\244\001\002\000\006\005\240\010\237\001\002\000\004" +
    "\023\241\001\002\000\042\002\ufffb\004\ufffb\006\ufffb\007" +
    "\ufffb\012\ufffb\017\ufffb\023\ufffb\024\ufffb\027\ufffb\047\ufffb" +
    "\052\ufffb\053\ufffb\057\ufffb\061\ufffb\063\ufffb\065\ufffb\001" +
    "\002\000\010\005\ufff3\010\ufff3\011\242\001\002\000\026" +
    "\023\105\024\101\031\072\046\107\056\104\060\074\062" +
    "\077\064\106\066\076\067\102\001\002\000\042\005\ufff1" +
    "\010\ufff1\030\115\031\111\032\122\033\120\034\113\035" +
    "\124\036\126\037\112\040\121\041\114\042\125\043\117" +
    "\044\116\045\123\001\002\000\026\023\105\024\101\031" +
    "\072\046\107\056\104\060\074\062\077\064\106\066\076" +
    "\067\102\001\002\000\042\005\ufff2\010\ufff2\030\115\031" +
    "\111\032\122\033\120\034\113\035\124\036\126\037\112" +
    "\040\121\041\114\042\125\043\117\044\116\045\123\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\243\000\014\002\005\020\003\022\013\024\007\030" +
    "\010\001\001\000\004\017\235\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\020\003\022" +
    "\232\024\007\030\010\001\001\000\012\020\003\022\231" +
    "\024\007\030\010\001\001\000\002\001\001\000\004\016" +
    "\221\001\001\000\004\021\215\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\005\024\006\021\020\022\027\023\001\001\000\002" +
    "\001\001\000\004\023\035\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\026\001\001\000\004\023\030" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\020\022\027\034\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\013\040\020\041\001\001\000\004\025\044\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\012\045\020" +
    "\003\030\046\001\001\000\002\001\001\000\026\007\064" +
    "\010\067\011\056\023\062\031\066\032\063\033\057\034" +
    "\060\035\051\036\053\001\001\000\010\012\047\020\003" +
    "\030\046\001\001\000\002\001\001\000\010\014\072\015" +
    "\211\034\102\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\004\176\014\072\015\145\034" +
    "\102\001\001\000\010\014\072\015\170\034\102\001\001" +
    "\000\024\007\167\010\067\023\062\031\066\032\063\033" +
    "\057\034\060\035\051\036\053\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\014\072\015\074" +
    "\034\102\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\014\072\015\156\034\102\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\014\072\015\153\034\102\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\014\072\015\107\034\102\001\001\000" +
    "\002\001\001\000\010\014\072\015\143\034\102\001\001" +
    "\000\010\014\072\015\142\034\102\001\001\000\010\014" +
    "\072\015\141\034\102\001\001\000\010\014\072\015\140" +
    "\034\102\001\001\000\010\014\072\015\137\034\102\001" +
    "\001\000\010\014\072\015\136\034\102\001\001\000\010" +
    "\014\072\015\135\034\102\001\001\000\010\014\072\015" +
    "\134\034\102\001\001\000\010\014\072\015\133\034\102" +
    "\001\001\000\010\014\072\015\132\034\102\001\001\000" +
    "\010\014\072\015\131\034\102\001\001\000\010\014\072" +
    "\015\130\034\102\001\001\000\010\014\072\015\127\034" +
    "\102\001\001\000\010\014\072\015\126\034\102\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\004\146\014\072\015\145\034" +
    "\102\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\004\152\014\072\015" +
    "\145\034\102\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\004\162\014\072" +
    "\015\145\034\102\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\025\172\001" +
    "\001\000\004\003\174\001\001\000\004\025\175\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\025\210\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\025\213\001\001\000" +
    "\002\001\001\000\004\024\217\001\001\000\012\020\003" +
    "\022\216\024\007\030\010\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\014" +
    "\226\001\001\000\002\001\001\000\004\014\230\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\014" +
    "\072\015\242\034\102\001\001\000\002\001\001\000\010" +
    "\014\072\015\244\034\102\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= DeclList MainFunDecl DeclList 
            {
              ProgramOp RESULT =null;
		int decList1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int decList1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<DeclOp> decList1 = (ArrayList<DeclOp>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int mainFunDeclleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int mainFunDeclright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		MainFunDeclOp mainFunDecl = (MainFunDeclOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int decList2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int decList2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<DeclOp> decList2 = (ArrayList<DeclOp>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                                        RESULT = new ProgramOp(decList1,mainFunDecl,decList2); System.out.println("Programma Corretto");
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ProgramOp start_val = (ProgramOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // DeclList ::= VarDecl DeclList 
            {
              ArrayList<DeclOp> RESULT =null;
		int varDeclleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int varDeclright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		VarDeclOp varDecl = (VarDeclOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int declListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int declListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<DeclOp> declList = (ArrayList<DeclOp>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayList();
                                                RESULT.add(varDecl);
                                                RESULT.addAll(declList);
                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DeclList",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DeclList ::= FunDecl DeclList 
            {
              ArrayList<DeclOp> RESULT =null;
		int funDeclleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int funDeclright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		FunDeclOp funDecl = (FunDeclOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int declListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int declListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<DeclOp> declList = (ArrayList<DeclOp>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayList();
                                                RESULT.add(funDecl);
                                                RESULT.addAll(declList);
                                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DeclList",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DeclList ::= 
            {
              ArrayList<DeclOp> RESULT =null;
		 RESULT = new ArrayList(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DeclList",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // MainFunDecl ::= MAIN FunDecl 
            {
              MainFunDeclOp RESULT =null;
		int funDeclleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int funDeclright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FunDeclOp funDecl = (FunDeclOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new MainFunDeclOp("main",funDecl);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MainFunDecl",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // VarDecl ::= Type IdInitList SEMI 
            {
              VarDeclOp RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idInitListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idInitListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Identifier> idInitList = (ArrayList<Identifier>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new VarDeclOp(type,idInitList);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDecl",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // VarDecl ::= VAR IdInitObblList SEMI 
            {
              VarDeclOp RESULT =null;
		int idInitListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idInitListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Identifier> idInitList = (ArrayList<Identifier>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new VarDeclOp("var",idInitList);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDecl",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Type ::= INTEGER 
            {
              String RESULT =null;
		RESULT = "integer";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Type ::= BOOL 
            {
              String RESULT =null;
		RESULT = "bool";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Type ::= FLOAT 
            {
              String RESULT =null;
		RESULT = "float";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Type ::= STRING 
            {
              String RESULT =null;
		RESULT = "string";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Type ::= CHAR 
            {
              String RESULT =null;
		RESULT = "char";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Type",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // IdInitList ::= ID 
            {
              ArrayList<Identifier> RESULT =null;
		int attribleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int attribright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object attrib = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            RESULT = new ArrayList<Identifier>();
                            Identifier id = new Identifier( (Integer) attrib);
                            RESULT.add(id);
                          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdInitList",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // IdInitList ::= IdInitList COMMA ID 
            {
              ArrayList<Identifier> RESULT =null;
		int idListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<Identifier> idList = (ArrayList<Identifier>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int attribleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int attribright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object attrib = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                            RESULT = new ArrayList<Identifier>();
                                            Identifier id = new Identifier((Integer)attrib);
                                            RESULT.add(id);
                                            RESULT.addAll(idList);
                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdInitList",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // IdInitList ::= ID ASSIGN Expr 
            {
              ArrayList<Identifier> RESULT =null;
		int attribleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int attribright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object attrib = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
	                            RESULT = new ArrayList<Identifier>();
                                Identifier id = new Identifier((Integer)attrib);
                                IdInitOp idInit = new IdInitOp(id,expr);
                                RESULT.add(idInit);
                             
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdInitList",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // IdInitList ::= IdInitList COMMA ID ASSIGN Expr 
            {
              ArrayList<Identifier> RESULT =null;
		int idInitListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idInitListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ArrayList<Identifier> idInitList = (ArrayList<Identifier>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int attribleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int attribright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object attrib = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                      	RESULT = new ArrayList<Identifier>();
                                        Identifier id = new Identifier((Integer)attrib);
                                        IdInitOp idInit = new IdInitOp(id,expr);
                                        RESULT.add(idInit);
                                        RESULT.addAll(idInitList);
                                      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdInitList",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // IdInitObblList ::= ID ASSIGN Const 
            {
              ArrayList<Identifier> RESULT =null;
		int attribleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int attribright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object attrib = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Const c = (Const)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                        RESULT = new ArrayList<Identifier>();
                                        Identifier id = new Identifier((Integer)attrib);
                                        IdInitOp idInit = new IdInitOp(id,c);
                                        RESULT.add(idInit);
                                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdInitObblList",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // IdInitObblList ::= IdInitObblList COMMA ID ASSIGN Const 
            {
              ArrayList<Identifier> RESULT =null;
		int idInitObbListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idInitObbListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ArrayList<Identifier> idInitObbList = (ArrayList<Identifier>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int attribleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int attribright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object attrib = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Const c = (Const)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                           RESULT = new ArrayList<Identifier>();
                                           Identifier id = new Identifier((Integer)attrib);
                                           IdInitOp idInit = new IdInitOp(id,c);
                                           RESULT.addAll(idInitObbList);
                                           RESULT.add(idInit);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdInitObblList",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Const ::= TRUE 
            {
              Const RESULT =null;
		RESULT = new BooleanConst(true);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Const",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Const ::= FALSE 
            {
              Const RESULT =null;
		RESULT = new BooleanConst(false);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Const",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Const ::= INTEGER_CONST 
            {
              Const RESULT =null;
		int attribleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int attribright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String attrib = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new IntegerConst(Integer.parseInt(attrib));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Const",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Const ::= REAL_CONST 
            {
              Const RESULT =null;
		int attribleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int attribright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String attrib = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new RealConst(Float.parseFloat(attrib));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Const",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Const ::= STRING_CONST 
            {
              Const RESULT =null;
		int attribleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int attribright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String attrib = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new StringConst(attrib);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Const",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Const ::= CHAR_CONST 
            {
              Const RESULT =null;
		int attribleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int attribright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String attrib = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new CharConst(attrib);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Const",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // FunDecl ::= DEF ID LPAR ParamDeclList RPAR COLON TypeOrVoid Body 
            {
              FunDeclOp RESULT =null;
		int attribleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int attribright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object attrib = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int parDeclListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int parDeclListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		ArrayList<ParDeclOp> parDeclList = (ArrayList<ParDeclOp>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int typeOrVoidleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int typeOrVoidright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String typeOrVoid = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		BodyOp body = (BodyOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            RESULT = new FunDeclOp(new Identifier((Integer)attrib),parDeclList,typeOrVoid,body);
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunDecl",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Body ::= LBRACK VarDeclList StatList RBRACK 
            {
              BodyOp RESULT =null;
		int varDeclListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int varDeclListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<VarDeclOp> varDeclList = (ArrayList<VarDeclOp>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int statListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int statListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Stat> statList = (ArrayList<Stat>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new BodyOp(varDeclList,statList); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Body",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // ParamDeclList ::= 
            {
              ArrayList<ParDeclOp> RESULT =null;
		 RESULT = new ArrayList<ParDeclOp>();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParamDeclList",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // ParamDeclList ::= NonEmptyParamDeclList 
            {
              ArrayList<ParDeclOp> RESULT =null;
		int parDeclListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int parDeclListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<ParDeclOp> parDeclList = (ArrayList<ParDeclOp>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayList<ParDeclOp>();
                                RESULT.addAll(parDeclList);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParamDeclList",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NonEmptyParamDeclList ::= ParDecl 
            {
              ArrayList<ParDeclOp> RESULT =null;
		int parDeclleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int parDeclright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ParDeclOp parDecl = (ParDeclOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayList<ParDeclOp>(); RESULT.add(parDecl);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NonEmptyParamDeclList",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NonEmptyParamDeclList ::= NonEmptyParamDeclList PIPE ParDecl 
            {
              ArrayList<ParDeclOp> RESULT =null;
		int parDeclListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int parDeclListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<ParDeclOp> parDeclList = (ArrayList<ParDeclOp>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int parDeclleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int parDeclright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ParDeclOp parDecl = (ParDeclOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayList<ParDeclOp>();
	                                                            RESULT.add(parDecl);
	                                                            RESULT.addAll(parDeclList);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NonEmptyParamDeclList",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ParDecl ::= Type IdList 
            {
              ParDeclOp RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Identifier> idList = (ArrayList<Identifier>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ParDeclOp(null,type,idList); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParDecl",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ParDecl ::= OUT Type IdList 
            {
              ParDeclOp RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Identifier> idList = (ArrayList<Identifier>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ParDeclOp("out",type,idList); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ParDecl",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // TypeOrVoid ::= Type 
            {
              String RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = type; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeOrVoid",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // TypeOrVoid ::= VOID 
            {
              String RESULT =null;
		 RESULT = "void"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TypeOrVoid",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // VarDeclList ::= 
            {
              ArrayList<VarDeclOp> RESULT =null;
		 RESULT = new ArrayList<VarDeclOp>(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDeclList",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // VarDeclList ::= VarDecl VarDeclList 
            {
              ArrayList<VarDeclOp> RESULT =null;
		int varDeclleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int varDeclright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		VarDeclOp varDecl = (VarDeclOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int varDeclListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int varDeclListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<VarDeclOp> varDeclList = (ArrayList<VarDeclOp>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ArrayList<VarDeclOp>();
                                                RESULT.addAll(varDeclList);
                                                RESULT.add(varDecl); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VarDeclList",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // StatList ::= Stat 
            {
              ArrayList<Stat> RESULT =null;
		int statleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int statright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stat stat = (Stat)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ArrayList<>();
                                                RESULT.add(stat); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StatList",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // StatList ::= StatList Stat 
            {
              ArrayList<Stat> RESULT =null;
		int statListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int statListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Stat> statList = (ArrayList<Stat>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int statleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int statright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Stat stat = (Stat)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ArrayList<>();
	                                    RESULT.addAll(statList);
	                                    RESULT.add(stat); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("StatList",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Stat ::= IfStat 
            {
              Stat RESULT =null;
		int ifStatleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ifStatright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		IfStatOp ifStat = (IfStatOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = ifStat;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Stat ::= ForStat 
            {
              Stat RESULT =null;
		int forStatleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int forStatright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ForStatOp forStat = (ForStatOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = forStat;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Stat ::= ReadStat SEMI 
            {
              Stat RESULT =null;
		int readStatleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int readStatright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ReadStatOp readStat = (ReadStatOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = readStat;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Stat ::= WriteStat SEMI 
            {
              Stat RESULT =null;
		int writeStatleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int writeStatright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		WriteStatOp writeStat = (WriteStatOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = writeStat;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // Stat ::= AssignStat SEMI 
            {
              Stat RESULT =null;
		int assignStatleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int assignStatright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		AssignStatOp assignStat = (AssignStatOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = assignStat;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // Stat ::= WhileStat 
            {
              Stat RESULT =null;
		int whileStatleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int whileStatright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		WhileStatOp whileStat = (WhileStatOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = whileStat;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // Stat ::= FunCall SEMI 
            {
              Stat RESULT =null;
		int funCallleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int funCallright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		FunCallOp funCall = (FunCallOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = funCall; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // Stat ::= RETURN Expr SEMI 
            {
              Stat RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = expr; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Stat ::= RETURN SEMI 
            {
              Stat RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Stat ::= 
            {
              Stat RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Stat",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // IfStat ::= IF Expr THEN Body Else 
            {
              IfStatOp RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int body1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int body1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		BodyOp body1 = (BodyOp)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int body2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int body2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		BodyOp body2 = (BodyOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IfStatOp(expr,body1,(BodyOp) body2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IfStat",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Else ::= 
            {
              BodyOp RESULT =null;
		RESULT = new BodyOp(null,null);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Else",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Else ::= ELSE Body 
            {
              BodyOp RESULT =null;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		BodyOp body = (BodyOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = body;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Else",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // WhileStat ::= WHILE Expr LOOP Body 
            {
              WhileStatOp RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		BodyOp body = (BodyOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new WhileStatOp(expr,body); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WhileStat",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ForStat ::= FOR ID ASSIGN INTEGER_CONST TO INTEGER_CONST LOOP Body 
            {
              ForStatOp RESULT =null;
		int attribleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int attribright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object attrib = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int intConst1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int intConst1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String intConst1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int intConst2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int intConst2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String intConst2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		BodyOp body = (BodyOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                                                                                                Identifier id = new Identifier((Integer)attrib);
                                                                                                IdInitOp idInit = new IdInitOp(id,new IntegerConst(Integer.parseInt(intConst1)));
                                                                                                RESULT = new ForStatOp(idInit,new IntegerConst(Integer.parseInt(intConst2)),body);
                                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ForStat",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ReadStat ::= IdList READ STRING_CONST 
            {
              ReadStatOp RESULT =null;
		int idListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<Identifier> idList = (ArrayList<Identifier>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int attribleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int attribright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String attrib = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ReadStatOp(idList,new StringConst(attrib)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ReadStat",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ReadStat ::= IdList READ 
            {
              ReadStatOp RESULT =null;
		int idListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Identifier> idList = (ArrayList<Identifier>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ReadStatOp(idList,null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ReadStat",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // IdList ::= ID 
            {
              ArrayList<Identifier> RESULT =null;
		int attribleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int attribright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object attrib = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ArrayList<Identifier>();
                            RESULT.add(new Identifier((Integer) attrib)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdList",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // IdList ::= IdList COMMA ID 
            {
              ArrayList<Identifier> RESULT =null;
		int idListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<Identifier> idList = (ArrayList<Identifier>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int attribleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int attribright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object attrib = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ArrayList<Identifier>();
	                        RESULT.addAll(idList);
                            RESULT.add( new Identifier((Integer) attrib)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IdList",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // WriteStat ::= LPAR ExprList RPAR WRITE 
            {
              WriteStatOp RESULT =null;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<Expr> exprList = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new WriteStatOp(exprList, new StringConst("write"));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WriteStat",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // WriteStat ::= LPAR ExprList RPAR WRITELN 
            {
              WriteStatOp RESULT =null;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<Expr> exprList = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new WriteStatOp(exprList,new StringConst("writeln"));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WriteStat",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // AssignStat ::= IdList ASSIGN ExprList 
            {
              AssignStatOp RESULT =null;
		int idListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<Identifier> idList = (ArrayList<Identifier>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Expr> exprList = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AssignStatOp(idList,exprList);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("AssignStat",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // FunCall ::= ID LPAR ExprList RPAR 
            {
              FunCallOp RESULT =null;
		int attribleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int attribright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object attrib = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Expr> exprList = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new FunCallOp(new Identifier((Integer)attrib),exprList);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunCall",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // FunCall ::= ID LPAR RPAR 
            {
              FunCallOp RESULT =null;
		int attribleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int attribright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object attrib = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new FunCallOp(new Identifier((Integer)attrib),null);;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FunCall",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ExprList ::= Expr 
            {
              ArrayList<Expr> RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ArrayList<Expr>();
                         RESULT.add(expr); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExprList",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ExprList ::= Expr COMMA ExprList 
            {
              ArrayList<Expr> RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Expr> exprList = (ArrayList<Expr>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ArrayList<Expr>();
                              RESULT.addAll(exprList);
                              RESULT.add(expr); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ExprList",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Expr ::= Const 
            {
              Expr RESULT =null;
		int conleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int conright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Const con = (Const)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = con;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Expr ::= ID 
            {
              Expr RESULT =null;
		int attribleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int attribright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object attrib = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Identifier((Integer)attrib);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Expr ::= FunCall 
            {
              Expr RESULT =null;
		int funCallleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int funCallright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		FunCallOp funCall = (FunCallOp)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = funCall; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Expr ::= Expr PLUS Expr 
            {
              Expr RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr expr1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr expr2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new PlusOp(expr1,expr2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Expr ::= Expr MINUS Expr 
            {
              Expr RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr expr1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr expr2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new MinusOp(expr1,expr2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Expr ::= Expr TIMES Expr 
            {
              Expr RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr expr1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr expr2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new TimesOp(expr1,expr2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Expr ::= Expr DIV Expr 
            {
              Expr RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr expr1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr expr2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new DivOp(expr1,expr2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Expr ::= Expr AND Expr 
            {
              Expr RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr expr1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr expr2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new AndOp(expr1,expr2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Expr ::= Expr POW Expr 
            {
              Expr RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr expr1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr expr2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new PowOp(expr1,expr2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Expr ::= Expr STR_CONCAT Expr 
            {
              Expr RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr expr1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr expr2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new StrCatOp(expr1,expr2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Expr ::= Expr OR Expr 
            {
              Expr RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr expr1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr expr2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new OrOp(expr1,expr2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Expr ::= Expr GT Expr 
            {
              Expr RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr expr1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr expr2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new GtOp(expr1,expr2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Expr ::= Expr GE Expr 
            {
              Expr RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr expr1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr expr2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new GeOp(expr1,expr2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Expr ::= Expr LT Expr 
            {
              Expr RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr expr1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr expr2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new LtOp(expr1,expr2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Expr ::= Expr LE Expr 
            {
              Expr RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr expr1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr expr2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new LeOp(expr1,expr2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Expr ::= Expr EQ Expr 
            {
              Expr RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr expr1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr expr2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new EqOp(expr1,expr2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Expr ::= Expr NE Expr 
            {
              Expr RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expr expr1 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr expr2 = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new NeOp(expr1,expr2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Expr ::= MINUS Expr 
            {
              Expr RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new UMinusOp(expr);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Expr ::= NOT Expr 
            {
              Expr RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new NotOp(expr);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Expr ::= LPAR Expr RPAR 
            {
              Expr RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expr expr = (Expr)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = expr;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("Expr",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
